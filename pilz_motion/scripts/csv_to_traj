#!/usr/bin/env python2
# -*- coding: utf-8 -*-

""" Test motion """

from __future__ import absolute_import

import math
import re

import rospkg
import rospy
from geometry_msgs.msg import Point
from pilz_robot_programming.commands import *
from pilz_robot_programming.robot import *

__REQUIRED_API_VERSION__ = "1"  # API version
__ROBOT_VELOCITY__ = 0.1  # velocity of the robot

robot_config = {
    "planning_group": "manipulator",
    "target_link": "pointer",
    "reference_frame": "base_link",
    "default_or": from_euler(0, math.radians(180), 0),
}


def string_to_point(gcode):
    # Convert strings from Gcode file to ROS points
    float_pos = map(float, re.findall("[-+]?\d*\.?\d+|[-+]?\d+", gcode))
    if len(float_pos) == 3:
        point = Point(float_pos[0], float_pos[1], float_pos[2])
        return point
    else:
        rospy.logwarn("Non-position value on line?")
        return None


def start_program(planning_group, target_link, reference_frame, default_or):

    rospy.loginfo("Program started")  # log

    # Home move
    home = Ptp(
        goal=[0, 0, 0, 0, math.radians(-90), 0],
        vel_scale=__ROBOT_VELOCITY__,
        planning_group=planning_group,
    )

    # Home the robot
    try:
        r.move(home)
        rospy.loginfo("Lead in move finished.")
    except RobotMoveFailed:
        rospy.loginfo("Lead in move failed.")

    source_file = "square.txt"
    source_path = "{}/share/{}".format(rospack.get_path("pilz_motion"), source_file)

    radius = 0.005

    # Variables to be populated below
    init_ptp = None
    csv_seq = Sequence()

    with open(source_path, "r") as points_file:
        lines = points_file.readlines()

        # Ptp to first position
        init_point = string_to_point(lines[0])
        init_pose = Pose(
            position=Point(init_point.x, init_point.y, init_point.z),
            orientation=default_or,
        )

        init_ptp = Ptp(
            goal=init_pose,
            # acc_scale=0.3,
            vel_scale=__ROBOT_VELOCITY__,
            planning_group=planning_group,
            target_link=target_link,
            reference_frame=reference_frame,
        )

        # Populate Sequence
        for row in lines[1:-1]:
            point = string_to_point(row)
            if point:
                pose = Pose(
                    position=Point(point.x, point.y, point.z), orientation=default_or
                )
                rospy.logdebug("Adding point:\n%s", point)

                lin = Lin(
                    goal=pose,
                    # acc_scale=0.1,
                    vel_scale=__ROBOT_VELOCITY__,
                    planning_group=planning_group,
                    target_link=target_link,
                    reference_frame=reference_frame,
                )

                csv_seq.append(lin, blend_radius=radius)

        # Final point in sequence with no radius blend
        final_point = string_to_point(lines[-1])
        final_pose = Pose(
            position=Point(init_point.x, init_point.y, init_point.z),
            orientation=default_or,
        )

        final_ptp = Lin(
            goal=final_pose,
            # acc_scale=0.1,
            vel_scale=__ROBOT_VELOCITY__,
            planning_group=planning_group,
            target_link=target_link,
            reference_frame=reference_frame,
        )
        csv_seq.append(final_ptp)

    # Run Sequence
    rospy.loginfo("Attempting move.")

    # Ptp to first location
    try:
        r.move(init_ptp)
        rospy.loginfo("Lead in move finished.")
    except RobotMoveFailed:
        rospy.loginfo("Lead in move failed.")

    # Run the Lin Sequence
    try:
        r.move(csv_seq)
        rospy.loginfo("Sequence move finished.")
    except RobotMoveFailed:
        rospy.loginfo("Sequence move failed.")

    # Home the robot
    try:
        r.move(home)
        rospy.loginfo("Lead out move finished.")
    except RobotMoveFailed:
        rospy.loginfo("Lead out move failed.")


if __name__ == "__main__":
    # Init a ros node
    rospy.init_node("robot_program_node")
    rospack = rospkg.RosPack()

    # initialisation
    r = Robot(__REQUIRED_API_VERSION__)  # instance of the robot

    # start the main program
    start_program(**robot_config)
