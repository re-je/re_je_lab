#!/usr/bin/env python2
# -*- coding: utf-8 -*-

""" Target motion MoveIt script using SMACH """

from __future__ import absolute_import, division

import math
from builtins import input

import rospy
import smach
import tf2_ros
from ar_track_alvar_msgs.msg import AlvarMarkers
from geometry_msgs.msg import Point, Pose, PoseStamped, Quaternion
from moveit_goal_builder import MoveItGoalBuilder
from moveit_msgs.msg import (
    ExecuteTrajectoryAction,
    ExecuteTrajectoryGoal,
    MoveGroupAction,
)
from moveit_msgs.srv import GetCartesianPath, GetCartesianPathRequest
from qt_smach_viewer.introspection import IntrospectionServer
from rospy_message_converter import json_message_converter
from smach_ros import ServiceState, SimpleActionState
from std_msgs import Header


# State to get user input to confrim robot area is clear
class UserCheckState(smach.State):
    def __init__(self):
        super(UserCheckState, self).__init__(
            outcomes=["continue", "aborted"], input_keys=[], output_keys=[], io_keys=[]
        )

    def execute(self, ud):
        rospy.logwarn("Place the marker and stand clear of the robot?(Y/n):")
        go = input()
        if go == "Y":
            return "continue"
        else:
            return "aborted"


# Wait and clear marker_pose user data
class WaitState(smach.State):
    def __init__(self):
        super(WaitState, self).__init__(
            outcomes=["continue"], output_keys=["marker_pose"],
        )

    def execute(self, ud):
        rospy.loginfo("Clearing Marker Pose User Data")
        ud.marker_pose = None
        rospy.sleep(2.0)
        return "continue"


# Transform marker from camera frame to robot's base frame
class WaitForTransformState(smach.State):
    def __init__(self, timeout=2):
        super(WaitForTransformState, self).__init__(
            outcomes=["timeout", "marker_found", "preempted"],
            output_keys=["marker_pose"],
        )  # all outcomes and user data are defined
        # initialise the subscriber
        self.sub = rospy.Subscriber("ar_pose_marker", AlvarMarkers, self.marker_cb)
        # where we will put the content of the message
        self.marker_pose = None
        # the timeout float
        self.timeout = timeout

    # marker tf callback function
    def marker_cb(self, msg):
        try:
            self.marker_pose = tfBuffer.lookup_transform(
                "world", "target_pose", rospy.Time(0)
            )
            return
        except (
            tf2_ros.LookupException,
            tf2_ros.ConnectivityException,
            tf2_ros.ExtrapolationException,
        ):
            rospy.logerr("Could not calculate transfrom")
            return

    def execute(self, ud):
        # compute the timeout with rostime
        ros_timeout_ = rospy.Time().now() + rospy.Duration(self.timeout)
        # an empty string is considered False, non-empty True
        while not self.marker_pose:
            # check if we are over the timeout rostime
            if rospy.Time.now() > ros_timeout_:
                rospy.logwarn("Timed Out")  # warning message
                return "timeout"  # timeout
            # check if we are preempted or if ctrl+c
            elif self.preempt_requested() or rospy.is_shutdown():
                rospy.logwarn("Preempted ! (or shutdown)")  # waning message
                return "preempted"  # preempted
                rospy.sleep(0.1)  # free the thread for callback checking
        rospy.loginfo("Marker transfrom found! : '%s'", self.marker_pose)
        # copy the message content inside the userdata
        ud.marker_pose = self.marker_pose
        return "marker_found"  # message received


def TargetSM():
    # Initialisation
    Target_sm = smach.StateMachine(outcomes=["succeeded", "aborted", "preempted"])
    # 'with' means here: Open the state machine to let us add state and then close.
    with Target_sm:

        Target_sm.add(
            "StartupCheck",
            UserCheckState(),
            transitions={"continue": "HomeRobot", "aborted": "aborted"},
        )

        def home_robot_cb(ud, request):
            builder = MoveItGoalBuilder()
            builder.set_joint_goal(
                rospy.get_param("controller_joint_names"),
                [0.892249, 1.09392, -0.366986, -2.60445, 0.0413456, 2.54972],
            )
            builder.group_name = "manipulator"
            goal = builder.build()

            return goal

        Target_sm.add(
            "HomeRobot",
            SimpleActionState("move_group", MoveGroupAction, goal_cb=home_robot_cb),
            transitions={"succeeded": "UserPrompt"},
        )

        Target_sm.add(
            "UserPrompt",
            UserCheckState(),
            transitions={"continue": "WaitForTransform", "aborted": "aborted"},
        )

        Target_sm.add(
            "WaitForTransform",
            WaitForTransformState(),
            transitions={
                "timeout": "UserPrompt",
                "message_received": "TargetRobot",
                "preempted": "preempted",
            },
        )

        @smach.cb_interface(input_keys=["marker_pose"])
        def target_robot_cb(ud, request):
            pose_stamped = PoseStamped()
            pose_stamped.header.frame_id = "world"
            pose_stamped.pose.position = ud.marker_pose.transform.translation
            pose_stamped.pose.orientation = ud.marker_pose.transform.rotation

            builder = MoveItGoalBuilder()
            builder.set_pose_goal(pose_stamped)
            builder.group_name = "manipulator"
            builder.fixed_frame = "world"
            goal = builder.build()

            return goal

        Target_sm.add(
            "TargetRobot",
            SimpleActionState("move_group", MoveGroupAction, goal_cb=target_robot_cb),
            transitions={"succeeded": "Wait", "aborted": "UserPrompt"},
        )

        Target_sm.add(
            "Wait", WaitState(), transitions={"continue": "HomeRobot"},
        )


# A function main to be run
def main():
    # Create a StateMachine with the previous function
    Target_sm = TargetSM()
    # Setup  a IntrospectionServer to see in Smach Viewer
    introspection_server = IntrospectionServer(Target_sm)
    # start the server
    introspection_server.start()
    # Wait  before the execution start
    rospy.sleep(3.0)
    # Start the state machine
    outcome = Target_sm.execute()
    # Print a information about the result of the state machine
    rospy.loginfo("Result : %s", outcome)
    # Stop the IntrospectionServer
    introspection_server.stop()


if __name__ == "__main__":
    # Initialising a ROS Node
    rospy.init_node("target_motion")

    # Create the tf2 buffer and listener
    tfBuffer = tf2_ros.Buffer()
    listener = tf2_ros.TransformListener(tfBuffer)

    # Run the main function
    main()
